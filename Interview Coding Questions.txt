(1) Anagrams:


import java.util.*;
class Main {
    public static void main(String[] args) {
        String str1 = "list";
        String str2 = "list";
        
        char[] arr1 = str1.toCharArray();
        char[] arr2 = str2.toCharArray();
        
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        
        boolean result = Arrays.equals(arr1,arr2);
        System.out.println(result);
    }
}

(2) pallindrom:

class Main {
    public static void main(String[] args) {
        String str = "radar";
        
        String original = str.toLowerCase();
        StringBuilder b = new StringBuilder(original);
        String rev = b.reverse().toString();
        
        if (rev.equals(original)) {
            System.out.println("It's a Pallindrom");
        } else {
            System.out.println("Not a Pallindrom");
        }
    }
}

(3) Two Sum 


class Main {
    public static void main(String[] args) {
        int[] num = {2,3,1,6,5};
        
        int target = 5; 
        boolean found = false;
        for (int i = 0; i < num.length - 1; i++) {
            if (num[i] + num[i + 1] ==target) {
                 System.out.println(i + "," + (i + 1));
                 found = true;
            }
        }
        if (!found) {
            System.out.println("No Elements are matching!");
        }
    }
}


(4) maximum SubArray

class Main {
    public static void main(String[] args) {
        int maxSum = Integer.MIN_VALUE;
        int currentSum = 0;
        int[] nums = {5,4,-1,7,8};
        for (int i = 0; i < nums.length; i++) {
            currentSum += nums[i];
             if (currentSum > maxSum) {
                maxSum = currentSum;
            }
            if (currentSum < 0) {
                currentSum = 0;
            }
        }
        System.out.println(maxSum);
    }
}


(5)  Remove Duplicates From sorted array

class Main {
    public static void main(String[] args) {
        int[] nums = {1, 1, 2, 3, 3};
        int i = 0; 
        
        for (int j = 1; j < nums.length; j++) {
            if (nums[j] != nums[i]) {
                i++;
                nums[i] = nums[j];
            }
        }
        System.out.println(i + 1);
    }
}


(6)  Longest subString without duplicates


import java.util.*;
class Main {
    public static void main(String[] args) {
        String s = "abcabab";
        int left = 0; 
        int right = 0; 
        int maxLength = 0;
        
        HashSet<Character> seen = new HashSet<>();
        
        while (right < s.length()) {
            if (!seen.contains(s.charAt(right))) {
                seen.add(s.charAt(right));
                maxLength = Math.max(maxLength, right - left + 1);
                right++;
            } else {
                seen.remove(s.charAt(left));
                left++;
            }
        }
        System.out.println("Maximum Length: " + maxLength);
    }
}